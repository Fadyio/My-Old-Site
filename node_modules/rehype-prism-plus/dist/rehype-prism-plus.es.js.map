{"version":3,"file":"rehype-prism-plus.es.js","sources":["../index.js"],"sourcesContent":["/**\n * @typedef {import('hast').Node & {properties: Object<any, any>}} Node\n * @typedef {import('hast').Parent & {properties: Object<any, any>}} Parent\n * @typedef {import('hast').Root} Root\n * @typedef {import('unist-util-visit').Visitor<Node>} Visitor\n * @typedef Options options\n *   Configuration.\n * @property {boolean} [showLineNumbers]\n *   Set `showLineNumbers` to `true` to always display line number\n * @property {boolean} [ignoreMissing]\n *   Set `ignoreMissing` to `true` to ignore unsupported languages and line highlighting when no language is specified\n */\n\nimport { visit } from 'unist-util-visit'\nimport { toString } from 'hast-util-to-string'\nimport { refractor } from 'refractor/lib/all.js'\nimport { toHtml } from 'hast-util-to-html'\nimport { filter } from 'unist-util-filter'\nimport { unified } from 'unified'\nimport parse from 'rehype-parse'\nimport rangeParser from 'parse-numeric-range'\n\n/**\n * @param {Node} node\n * @return {string|null}\n */\nconst getLanguage = (node) => {\n  const className = node.properties.className || []\n\n  for (const classListItem of className) {\n    if (classListItem.slice(0, 9) === 'language-') {\n      return classListItem.slice(9).toLowerCase()\n    }\n  }\n  return null\n}\n\n/**\n * Create a closure that determines if we have to highlight the given index\n *\n * @param {string} meta\n * @return { (index:number) => boolean }\n */\nconst calculateLinesToHighlight = (meta) => {\n  const RE = /{([\\d,-]+)}/\n  // Remove space between {} e.g. {1, 3}\n  const parsedMeta = meta\n    .split(',')\n    .map((str) => str.trim())\n    .join()\n  if (RE.test(parsedMeta)) {\n    const strlineNumbers = RE.exec(parsedMeta)[1]\n    const lineNumbers = rangeParser(strlineNumbers)\n    return (index) => lineNumbers.includes(index + 1)\n  } else {\n    return () => false\n  }\n}\n\n/**\n * Check if we want to start the line numbering from a given number or 1\n * showLineNumbers=5, will start the numbering from 5\n * @param {string} meta\n * @returns {number}\n */\nconst calculateStartingLine = (meta) => {\n  const RE = /showLineNumbers=(?<lines>\\d+)/i\n  // pick the line number after = using a named capturing group\n  if (RE.test(meta)) {\n    const {\n      groups: { lines },\n    } = RE.exec(meta)\n    return Number(lines)\n  }\n  return 1\n}\n\n/**\n * Split line to div node with className `code-line`\n *\n * @param {string} text\n * @return {Node[]}\n */\nconst splitLine = (text) => {\n  // Xdm Markdown parser every code line with \\n\n  const textArray = text.split(/\\n/)\n\n  // Remove last line \\n which results in empty array\n  if (textArray[textArray.length - 1].trim() === '') {\n    textArray.pop()\n  }\n\n  // Empty array are actually line segments so we convert them back to newlines\n  return textArray.map((line) => {\n    return {\n      type: 'element',\n      tagName: 'span',\n      properties: { className: ['code-line'] },\n      children: [{ type: 'text', value: line }],\n    }\n  })\n}\n\n/**\n * Split line to div node with className `code-line`\n *\n * @param {import('refractor').RefractorRoot} ast\n * @return {Root}\n */\nconst getNodePosition = (ast) => {\n  // @ts-ignore\n  let html = toHtml(ast)\n  const hast = unified().use(parse, { emitParseErrors: true, fragment: true }).parse(html)\n  return hast\n}\n\n/**\n * Split multiline text nodes into individual nodes with positioning\n *\n * @param {Parent['children']} ast\n * @return {Parent['children']}\n */\nconst splitTextByLine = (ast) => {\n  //@ts-ignore\n  return ast.reduce((result, node) => {\n    if (node.type === 'text') {\n      if (node.value.indexOf('\\n') === -1) {\n        result.push(node)\n        return result\n      }\n\n      const lines = node.value.split('\\n')\n      for (const [i, line] of lines.entries()) {\n        result.push({\n          type: 'text',\n          value: i === lines.length - 1 ? line : line + '\\n',\n          position: {\n            start: { line: node.position.start.line + i },\n            end: { line: node.position.start.line + i },\n          },\n        })\n      }\n\n      return result\n    }\n\n    if (node.children) {\n      // @ts-ignore\n      node.children = splitTextByLine(node.children)\n      result.push(node)\n      return result\n    }\n\n    result.push(node)\n    return result\n  }, [])\n}\n\n/**\n * Rehype plugin that highlights code blocks with refractor (prismjs)\n *\n * @type {import('unified').Plugin<[Options?], Root>}\n */\nconst rehypePrism = (options = {}) => {\n  return (tree) => {\n    // @ts-ignore\n    visit(tree, 'element', visitor)\n  }\n\n  /**\n   * @param {Node} node\n   * @param {number} index\n   * @param {Parent} parent\n   */\n  function visitor(node, index, parent) {\n    if (!parent || parent.tagName !== 'pre' || node.tagName !== 'code') {\n      return\n    }\n\n    const lang = getLanguage(node)\n\n    /** @type {string} */\n    // @ts-ignore\n    let meta = node.data && node.data.meta ? node.data.meta : ''\n    node.properties.className = node.properties.className || []\n    node.properties.className.push('code-highlight')\n\n    let refractorRoot\n    let langError = false\n\n    // Syntax highlight\n    if (lang) {\n      try {\n        // @ts-ignore\n        refractorRoot = refractor.highlight(toString(node), lang)\n        parent.properties.className = (parent.properties.className || []).concat('language-' + lang)\n      } catch (err) {\n        if (options.ignoreMissing && /Unknown language/.test(err.message)) {\n          langError = true\n          refractorRoot = node.children\n        } else {\n          throw err\n        }\n      }\n    } else {\n      refractorRoot = node.children\n    }\n\n    // @ts-ignore\n    refractorRoot = getNodePosition(refractorRoot)\n    refractorRoot.children = splitTextByLine(refractorRoot.children)\n\n    const shouldHighlightLine = calculateLinesToHighlight(meta)\n    const startingLineNumber = calculateStartingLine(meta)\n    // @ts-ignore\n    const codeLineArray = splitLine(toString(node))\n\n    for (const [i, line] of codeLineArray.entries()) {\n      // Code lines\n      if (meta.toLowerCase().includes('showLineNumbers'.toLowerCase()) || options.showLineNumbers) {\n        line.properties.line = [(i + startingLineNumber).toString()]\n        line.properties.className.push('line-number')\n      }\n\n      // Line highlight\n      if (shouldHighlightLine(i)) {\n        line.properties.className.push('highlight-line')\n      }\n\n      // @ts-ignore\n      if (lang === 'diff' && toString(line).substring(0, 1) === '-') {\n        line.properties.className.push('deleted')\n        // @ts-ignore\n      } else if (lang === 'diff' && toString(line).substring(0, 1) === '+') {\n        line.properties.className.push('inserted')\n      }\n\n      // Syntax highlight\n      const treeExtract = filter(\n        refractorRoot,\n        (node) => node.position.start.line <= i + 1 && node.position.end.line >= i + 1\n      )\n      line.children = treeExtract.children\n    }\n\n    node.children = codeLineArray\n  }\n}\n\nexport default rehypePrism\n"],"names":["splitTextByLine","ast","reduce","result","node","type","value","indexOf","push","lines","split","entries","i","line","length","position","start","end","children","rehypePrism","options","tree","visit","visitor","index","parent","tagName","refractorRoot","html","lang","properties","className","classListItem","slice","toLowerCase","getLanguage","meta","data","refractor","highlight","toString","concat","err","ignoreMissing","test","message","toHtml","unified","use","parse","emitParseErrors","fragment","textArray","shouldHighlightLine","RE","parsedMeta","map","str","trim","join","strlineNumbers","exec","lineNumbers","rangeParser","includes","calculateLinesToHighlight","startingLineNumber","Number","groups","calculateStartingLine","codeLineArray","pop","showLineNumbers","substring","treeExtract","filter"],"mappings":"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"}