{"version":3,"file":"generator.mjs","sources":["../../src/regex.js","../../src/parse-citation.js","../../src/utils.js","../../src/html-transform-browser.js","../../src/generator.js"],"sourcesContent":["/**\n * Captures normal citation in square bracket and in-text citation\n * Citation key start should start with a letter, digit, or _,\n * and contains only alphanumerics and single internal punctuation characters (:.#$%&-+?<>~/),\n *\n * e.g. [-@wadler1990], [@hughes1989, sec 3.4], [see @wadler1990; and @hughes1989, pp. 4]\n * and @wadler1990\n *\n * Group #1 - citation term without [] bracket e.g. -@wadler1990\n * Group #2 - in-text citation term e.g. @wadler1990\n *\n * \\[([^[\\]]*@[^[\\]]+)\\] for group #1\n * (?!\\b)@([a-zA-Z0-9_][a-zA-Z0-9_:.#$%&\\-+?<>~]*) for group #2\n * Use (?!\\b) to avoid email like address e.g. xyx@google.com\n * */\nexport const citeExtractorRe =\n  /\\[([^[\\]]*@[^[\\]]+)\\]|(?!\\b)(@[a-zA-Z0-9_][a-zA-Z0-9_:.#$%&\\-+?<>~]*)/\nexport const citeKeyRe = /@([a-zA-Z0-9_][a-zA-Z0-9_:.#$%&\\-+?<>~]*)/\nexport const citeBracketRe = /\\[.*\\]/\n","/**\n * @typedef CiteItem\n *   Cite item to be passed into citeproc-js\n * @property {string} [id]\n *   The id field is required\n * @property {string} [locator]\n *   A string identifying a page number or other pinpoint location or range within the resource;\n * @property {string} [label]\n *   Path to file\n * @property {string} [prefix]\n *   A string to print before this cite item\n * @property {string} [suffix]\n *   A string to print after this cite item\n * @property {boolean} [suppress-author]\n *   If true, author names will not be included in the citation output for this cite\n * @property {boolean} [author-only]\n *   If true, only the author name will be included in the citation output for this cite\n */\n\nimport { citeBracketRe, citeKeyRe } from './regex.js'\n\nconst locatorMapping = {\n  book: 'book',\n  'bk.': 'book',\n  'bks.': 'book',\n  chapter: 'chapter',\n  'chap.': 'chapter',\n  'chaps.': 'chapter',\n  column: 'column',\n  'col.': 'column',\n  'cols.': 'column',\n  figure: 'figure',\n  'fig.': 'figure',\n  'figs.': 'figure',\n  folio: 'folio',\n  'fol.': 'folio',\n  'fols.': 'folio',\n  number: 'number',\n  'no.': 'number',\n  'nos.': 'number',\n  line: 'line',\n  'l.': 'line',\n  'll.': 'line',\n  note: 'note',\n  'n.': 'note',\n  'nn.': 'note',\n  opus: 'opus',\n  'op.': 'opus',\n  'opp.': 'opus',\n  page: 'page',\n  'p.': 'page',\n  'pp.': 'page',\n  paragraph: 'paragraph',\n  'para.': 'paragraph',\n  'paras.': 'paragraph',\n  part: 'part',\n  'pt.': 'part',\n  'pts.': 'part',\n  section: 'section',\n  'sec.': 'section',\n  'secs.': 'section',\n  'sub verbo': 'sub verbo',\n  's.v.': 'sub verbo',\n  's.vv.': 'sub verbo',\n  verse: 'verse',\n  'v.': 'verse',\n  'vv.': 'verse',\n  volume: 'volume',\n  'vol.': 'volume',\n  'vols.': 'volume',\n  '¶': 'paragraph',\n  '¶¶': 'paragraph',\n  '§': 'section',\n  '§§': 'section',\n}\n\n/**\n * Parses a given citation string and return properties and entries required for cite-proc.\n * Adapted from https://github.com/Zettlr/Citr/blob/master/lib/citr.ts\n *\n * @param {string} citeString Cite string in the form of '[@item]' or '@item'\n * @return {[Object, CiteItem[]]} [properties, entries]\n */\nexport const parseCitation = (citeString) => {\n  /** @type {CiteItem[]} */\n  let entries = []\n  let properties\n  if (citeBracketRe.test(citeString)) {\n    properties = { noteIndex: 0 }\n    // Handle citations in the form of [@item1; @item2]\n    const citeItems = citeString.substr(1, citeString.length - 2).split(';')\n    for (const citeItem of citeItems) {\n      // Prefix is the portion before @ e.g. [see @item1] or an empty string\n      let prefix = ''\n      let locator = ''\n      let label = 'page'\n      let suffix = ''\n      const citeChunk = citeItem.split('@')\n      if (citeChunk.length === 1) {\n        throw new Error('Cite key should be in the form of @key')\n      } else if (citeChunk.length > 2) {\n        throw new Error('More than one cite key @ detected, please separate keys with ;')\n      }\n      prefix += citeChunk[0]\n      prefix = prefix.trim()\n\n      // If [-@item1], suppress author\n      let suppressAuthor = citeItem.indexOf('@') > 0 && citeItem[citeItem.indexOf('@') - 1] === '-'\n      if (suppressAuthor) prefix = prefix.substr(0, prefix.length - 1).trim()\n\n      // The citation key can be terminated with a comma or space\n      let commaIndex = citeChunk[1].indexOf(',') + 1\n      // If the commaIndex is 0, this means there was no comma - check for space\n      if (commaIndex === 0) commaIndex = citeChunk[1].indexOf(' ') + 1\n      // Pass undefined to extract everything\n      if (commaIndex <= 0) commaIndex = undefined\n      const citeKey = citeItem.substr(citeItem.indexOf('@'), commaIndex).match(citeKeyRe)[0]\n\n      // We are left with the locator, suffix and label\n      let afterKey = citeItem.split('@')[1].substr(citeKey.length).trim()\n      if (afterKey[0] === ',') afterKey = afterKey.substr(1).trim()\n      // Locator should be in the form of 11-22, 33\n      // Would not work form roman numerals or alphabetical sections\n      const locatorMatch = afterKey.match(/(\\d|-| |,)+/g)\n      if (locatorMatch !== null) {\n        locator = locatorMatch[0].trim()\n        // String before the locator is taken to be the label\n        // Use heuristic from https://pandoc.org/MANUAL.html#citation-syntax to convert locator label to valid\n        // Label has to be one of the following: https://docs.citationstyles.org/en/stable/specification.html#locators\n        label = afterKey.split(locator)[0].trim()\n        label = locatorMapping[label] || 'page'\n        // String after the locator is taken to be the suffix\n        suffix = afterKey.split(locator)[1].trim()\n      } else {\n        // If no locator is found, entire string is assumed to be the suffix\n        suffix = afterKey.trim()\n      }\n\n      entries.push({\n        // Get the first capture group which returns the citekey without @\n        id: citeItem.match(citeKeyRe)[1],\n        locator,\n        label,\n        prefix,\n        suffix,\n        'suppress-author': suppressAuthor,\n      })\n    }\n  } else {\n    // Single item in the form of @item1\n    // See https://citeproc-js.readthedocs.io/en/latest/running.html#special-citation-forms\n    properties = { noteIndex: 0, mode: 'composite' }\n    entries = [citeString].map((str) => ({\n      id: str.match(citeKeyRe)[1],\n    }))\n  }\n  return [properties, entries]\n}\n","import fetch from 'cross-fetch'\n\nexport const isNode = typeof window === 'undefined'\n\nexport const readFile = async (path) => {\n  if (isValidHttpUrl(path)) {\n    return fetch(path)\n      .then((response) => response.text())\n      .then((data) => data)\n  } else {\n    if (isNode) {\n      return import('fs').then((fs) => fs.readFileSync(path, 'utf8'))\n    } else {\n      throw new Error(`Cannot read non valid URL in node env.`)\n    }\n  }\n}\n\n/**\n * Check if valid URL\n * https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url\n *\n * @param {string} str\n * @return {boolean}\n */\nexport const isValidHttpUrl = (str) => {\n  let url\n\n  try {\n    url = new URL(str)\n  } catch (_) {\n    return false\n  }\n\n  return url.protocol === 'http:' || url.protocol === 'https:'\n}\n\n/**\n * Get bibliography by merging options and vfile data\n *\n * @param {import('./generator.js').Options} options\n * @param {import('vfile').VFile} file\n */\nexport const getBibliography = async (options, file) => {\n  let bibliography = ''\n  if (options.bibliography) {\n    bibliography = options.bibliography\n    // @ts-ignore\n  } else if (file?.data?.frontmatter?.bibliography) {\n    // @ts-ignore\n    bibliography = file.data.frontmatter.bibliography\n    // If local path, get absolute path\n    if (!isValidHttpUrl(bibliography)) {\n      if (isNode) {\n        bibliography = await import('path').then((path) =>\n          path.join(options.path || file.cwd, bibliography)\n        )\n      } else {\n        throw new Error(`Cannot read non valid bibliography URL in node env.`)\n      }\n    }\n  }\n\n  return bibliography\n}\n\n/**\n * Load CSL - supports predefined name from config.templates.data or http, file path (nodejs)\n *\n * @param {*} Cite cite object from citation-js\n * @param {string} format CSL name e.g. apa or file path to CSL file\n * @param {string} root optional root path\n */\nexport const loadCSL = async (Cite, format, root = '') => {\n  const config = Cite.plugins.config.get('@csl')\n  if (!Object.keys(config.templates.data).includes(format)) {\n    let cslPath = ''\n    if (isValidHttpUrl(format)) cslPath = format\n    else {\n      if (isNode) cslPath = await import('path').then((path) => path.join(root, format))\n    }\n    try {\n      config.templates.add('customCSL', await readFile(cslPath))\n    } catch (err) {\n      throw new Error(`Input CSL option, ${format}, is invalid or is an unknown file.`)\n    }\n    return 'customCSL'\n  } else {\n    return format\n  }\n}\n\n/**\n * Load locale - supports predefined name from config.locales.data or http, file path (nodejs)\n *\n * @param {*} Cite cite object from citation-js\n * @param {string} format locale name\n * @param {string} root optional root path\n */\nexport const loadLocale = async (Cite, format, root = '') => {\n  const config = Cite.plugins.config.get('@csl')\n  if (!Object.keys(config.locales.data).includes(format)) {\n    let localePath = ''\n    if (isValidHttpUrl(format)) localePath = format\n    else {\n      if (isNode) localePath = await import('path').then((path) => path.join(root, format))\n    }\n    try {\n      const file = await readFile(localePath)\n      const xmlLangRe = /xml:lang=\"(.+)\"/\n      const localeName = file.match(xmlLangRe)[1]\n      config.locales.add(localeName, file)\n      return localeName\n    } catch (err) {\n      throw new Error(`Input locale option, ${format}, is invalid or is an unknown file.`)\n    }\n  } else {\n    return format\n  }\n}\n","import { fromDom } from 'hast-util-from-dom'\n\n/**\n * Convert HTML to HAST node\n *\n * @param {string} html\n */\nexport const htmlToHast = (html) => {\n  const frag = document.createRange().createContextualFragment(html)\n  return fromDom(frag).children[0]\n}\n","/**\n * @typedef {import('hast').Node} Node\n * @typedef {import('hast').Parent} Parent\n * @typedef {import('hast').Root} Root\n * @typedef {import('unist-util-visit').Visitor<Node>} Visitor\n * @typedef {import('./parse-citation').CiteItem} CiteItem\n * @typedef Options\n *   Configuration.\n * @property {string} [bibliography]\n *   Name of bibtex or CSL-JSON file\n * @property {string} [path]\n *   Optional path to file (node). Will be joined with `options.bibliography` and used in place of cwd of file if provided.\n * @property {'apa'|'vancouver'|'harvard1'|'chicago'|'mla'|string} [csl]\n *   One of 'apa', 'vancouver', 'harvard1', 'chicago', 'mla'. A local file path or URL to a valid CSL file is also accepted.\n * @property {string} [lang]\n *   Locale to use in formatting citations. Defaults to en-US. A local file path or URL to a valid locale file is also accepted.\n * @property {boolean} [suppressBibliography]\n *   By default, biliography is inserted after the entire markdown file.\n *   If the file contains `[^Ref]`, the biliography will be inserted there instead.\n * @property {string[]} [noCite]\n *   Citation IDs (@item1) to include in the bibliography even if they are not cited in the document\n * @property {string[]} [inlineClass]\n *   Class(es) to add to the inline citation.\n * @property {string[]} [inlineBibClass]\n *   Class(es) to add to the inline bibliography. Leave empty for no inline bibliography.\n */\n\nimport { visit } from 'unist-util-visit'\nimport fetch from 'cross-fetch'\nimport { parseCitation } from './parse-citation.js'\nimport { citeExtractorRe } from './regex.js'\nimport { isNode, isValidHttpUrl, readFile, getBibliography, loadCSL, loadLocale } from './utils.js'\nimport { htmlToHast } from './html-transform-node.js'\n\nconst defaultCiteFormat = 'apa'\nconst permittedTags = ['div', 'p', 'span', 'li']\n\n/**\n * Generate citation using citeproc\n * This accounts for prev citations and additional properties\n *\n * @param {*} citeproc\n * @param {CiteItem[]} entries\n * @param {string} citationId\n * @param {any[]} citationPre\n * @param {Options} options\n * @param {*} [properties={ noteIndex: 0 }]\n * @return {*}\n */\nconst genCitation = (\n  citeproc,\n  entries,\n  citationId,\n  citationPre,\n  options,\n  properties = { noteIndex: 0 }\n) => {\n  const c = citeproc.processCitationCluster(\n    {\n      citationID: citationId,\n      citationItems: entries,\n      properties: properties,\n    },\n    citationPre.length > 0 ? citationPre : [],\n    []\n  )\n  // c = [ { bibchange: true, citation_errors: [] }, [ [ 0, '(1)', 'CITATION-1' ] ]]\n  const result = c[1].find((x) => x[2] === citationId)\n  const ids = `citation--${entries.map((x) => x.id.toLowerCase()).join('--')}--${\n    citationId.split('-')[1]\n  }`\n  // Coerce to html to parse HTML code e.g. &#38; and return text node\n  return htmlToHast(\n    `<span class=\"${(options.inlineClass ?? []).join(' ')}\" id=${ids}>${result[1]}</span>`\n  )\n}\n\n/**\n * Generate bibliography in html and convert it to hast\n *\n * @param {*} citeproc\n */\nconst genBiblioNode = (citeproc) => {\n  const [params, bibBody] = citeproc.makeBibliography()\n  const bibliography =\n    '<div id=\"refs\" class=\"references csl-bib-body\">\\n' + bibBody.join('') + '</div>'\n  const biblioNode = htmlToHast(bibliography)\n\n  // Add citekey id to each bibliography entry.\n  biblioNode.children\n    .filter((node) => node.properties?.className?.includes('csl-entry'))\n    .forEach((node, i) => {\n      const citekey = params.entry_ids[i][0].toLowerCase()\n      node.properties = node.properties || {}\n      node.properties.id = 'bib-' + citekey\n    })\n  return biblioNode\n}\n\n/**\n * Rehype plugin that formats citations in markdown documents and insert bibliography in html format\n *\n *    [-@wadler1990]                              --> (1990)\n *    [@hughes1989, sec 3.4]                      --> (Hughes 1989, sec 3.4)\n *    [see @wadler1990; and @hughes1989, pp. 4]   --> (see Wadler 1990 and Hughes 1989, pp. 4)\n *\n * @param {*} Cite cite object from citation-js configured with the required CSLs\n * @return {import('unified').Plugin<[Options?], Root>}\n */\nconst rehypeCitationGenerator = (Cite) => {\n  return (options = {}) => {\n    return async (tree, file) => {\n      let bibliography = await getBibliography(options, file)\n      if (!bibliography) {\n        return\n      }\n\n      /** @type {string} */\n      let bibtexFile\n      /** @type {string} */ // @ts-ignore\n      const inputCiteformat = options.csl || file?.data?.frontmatter?.csl || defaultCiteFormat\n      const inputLang = options.lang || 'en-US'\n      const config = Cite.plugins.config.get('@csl')\n      const citeFormat = await loadCSL(Cite, inputCiteformat, options.path)\n      const lang = await loadLocale(Cite, inputLang, options.path)\n\n      if (isValidHttpUrl(bibliography)) {\n        isNode\n        const response = await fetch(bibliography)\n        bibtexFile = await response.text()\n      } else {\n        if (isNode) {\n          bibtexFile = await readFile(bibliography)\n        } else {\n          throw new Error(`Cannot read non valid bibliography URL in node env.`)\n        }\n      }\n\n      const citations = new Cite(bibtexFile)\n      const citationIds = citations.data.map((x) => x.id)\n      const citationPre = []\n      let citationId = 1\n      const citeproc = config.engine(citations.data, citeFormat, lang, 'html')\n      visit(tree, 'text', (node, idx, parent) => {\n        const match = node.value.match(citeExtractorRe)\n        //@ts-ignore\n        if (!match || !permittedTags.includes(parent.tagName)) return\n        const citeStartIdx = match.index\n        const citeEndIdx = match.index + match[0].length\n        const newChildren = []\n        // if preceding string\n        if (citeStartIdx !== 0) {\n          // create a new child node\n          newChildren.push({\n            type: 'text',\n            value: node.value.slice(0, citeStartIdx),\n          })\n        }\n\n        const [properties, entries] = parseCitation(match[0])\n\n        // If id is not in citation file (e.g. route alias or js package), abort process\n        for (const citeItem of entries) {\n          if (!citationIds.includes(citeItem.id)) return\n        }\n        const citedTextNode = genCitation(\n          citeproc,\n          entries,\n          `CITATION-${citationId}`,\n          citationPre,\n          options,\n          properties\n        )\n\n        // Prepare citationPre and citationId for the next cite instance\n        citationPre.push([`CITATION-${citationId}`, 0])\n        citationId = citationId + 1\n\n        // TODO: return html with link\n        newChildren.push(citedTextNode)\n\n        // if trailing string\n        if (citeEndIdx < node.value.length) {\n          newChildren.push({\n            type: 'text',\n            value: node.value.slice(citeEndIdx),\n          })\n        }\n\n        // insert into the parent\n        parent.children = [\n          ...parent.children.slice(0, idx),\n          ...newChildren,\n          ...parent.children.slice(idx + 1),\n        ]\n      })\n\n      if (options.noCite) {\n        citeproc.updateItems(options.noCite.map((x) => x.replace('@', '')))\n      }\n\n      if (\n        citeproc.registry.mylist.length >= 1 &&\n        (!options.suppressBibliography || options.inlineBibClass?.length > 0)\n      ) {\n        const biblioNode = genBiblioNode(citeproc)\n        let bilioInserted = false\n\n        const biblioMap = {}\n        biblioNode.children\n          .filter((node) => node.properties?.className?.includes('csl-entry'))\n          .forEach((node) => {\n            const citekey = node.properties.id.split('-').slice(1).join('-')\n            biblioMap[citekey] = { ...node }\n            biblioMap[citekey].properties = { id: 'inlinebib-' + citekey }\n          })\n\n        // Insert it at ^ref, if not found insert it as the last element of the tree\n        visit(tree, 'element', (node, idx, parent) => {\n          // Add inline bibliography\n          if (\n            options.inlineBibClass?.length > 0 &&\n            node.properties?.id?.toString().startsWith('citation-')\n          ) {\n            // id is citation--nash1951--nash1950--1\n            const [, ...citekeys] = node.properties.id.toString().split('--')\n            const citationID = citekeys.pop()\n\n            const inlineBibNode = {\n              type: 'element',\n              tagName: 'div',\n              properties: {\n                className: options.inlineBibClass,\n                id: `inlineBib--${citekeys.join('--')}--${citationID}`,\n              },\n              children: citekeys.map((citekey) => {\n                const aBibNode = biblioMap[citekey]\n                aBibNode.properties = {\n                  class: 'inline-entry',\n                  id: `inline--${citekey}--${citationID}`,\n                }\n                return aBibNode\n              }),\n            }\n            parent.children.push(inlineBibNode)\n          }\n\n          // Add bibliography\n          if (\n            !options.suppressBibliography &&\n            (node.tagName === 'p' || node.tagName === 'div') &&\n            node.children[0].value === '[^ref]'\n          ) {\n            parent.children[idx] = biblioNode\n            bilioInserted = true\n          }\n        })\n\n        if (!options.suppressBibliography && !bilioInserted) {\n          tree.children.push(biblioNode)\n        }\n      }\n    }\n  }\n}\n\nexport default rehypeCitationGenerator\n"],"names":["citeExtractorRe","citeKeyRe","citeBracketRe","locatorMapping","book","chapter","column","figure","folio","number","line","note","opus","page","paragraph","part","section","verse","volume","readFile","async","isValidHttpUrl","path","fetch","then","response","text","data","Error","str","url","URL","_","protocol","htmlToHast","html","frag","document","createRange","createContextualFragment","fromDom","children","permittedTags","rehypeCitationGenerator","Cite","options","tree","file","bibtexFile","bibliography","_file$data","frontmatter","_file$data$frontmatte","getBibliography","inputCiteformat","csl","inputLang","lang","config","plugins","get","citeFormat","format","root","Object","keys","templates","includes","cslPath","add","err","loadCSL","locales","localePath","localeName","match","loadLocale","citations","citationIds","map","x","id","citationPre","citationId","citeproc","engine","visit","node","idx","parent","value","tagName","citeStartIdx","index","citeEndIdx","length","newChildren","push","type","slice","properties","entries","citeString","test","noteIndex","citeItems","substr","split","citeItem","prefix","locator","label","suffix","citeChunk","trim","suppressAuthor","indexOf","commaIndex","undefined","citeKey","afterKey","locatorMatch","mode","parseCitation","citedTextNode","result","processCitationCluster","citationID","citationItems","find","ids","toLowerCase","join","inlineClass","genCitation","noCite","updateItems","replace","registry","mylist","suppressBibliography","inlineBibClass","biblioNode","params","bibBody","makeBibliography","filter","_node$properties","className","_node$properties$clas","forEach","i","citekey","entry_ids","genBiblioNode","bilioInserted","biblioMap","_node$properties2","_node$properties2$cla","_node$properties3","_node$properties3$id","toString","startsWith","citekeys","pop","inlineBibNode","aBibNode","class"],"mappings":"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"}