"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ref = exports.parsers = exports.formats = void 0;

var json = _interopRequireWildcard(require("./json.js"));

var _core = require("@citation-js/core");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const scraperLinks = ['fulltext_html', 'fulltext_xml', 'fulltext_pdf'];
const ref = '@bibjson';
exports.ref = ref;
const parsers = {
  json
};
exports.parsers = parsers;
const formats = {
  '@bibjson/quickscrape+record+object': {
    parse: json.quickscrapeRecord,
    parseType: {
      propertyConstraint: {
        props: 'link',

        value(links) {
          return scraperLinks.some(link => links.find(({
            type
          }) => type === link));
        }

      },
      extends: '@bibjson/record+object'
    }
  },
  '@bibjson/record+object': {
    parse: json.record,
    parseType: {
      dataType: 'SimpleObject',
      propertyConstraint: [{
        props: 'title'
      }, {
        props: ['author', 'editor'],
        match: 'some',

        value(authors) {
          return Array.isArray(authors) && authors[0] && 'name' in authors[0];
        }

      }]
    }
  },
  '@bibjson/collection+object': {
    parse(collection) {
      return collection.records;
    },

    parseType: {
      dataType: 'SimpleObject',
      propertyConstraint: [{
        props: 'metadata',

        value(metadata) {
          return 'collection' in metadata;
        }

      }, {
        props: 'records',

        value(records) {
          return Array.isArray(records);
        }

      }]
    }
  }
};
exports.formats = formats;

_core.plugins.add(ref, {
  input: formats
});