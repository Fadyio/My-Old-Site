/**
 * @fileoverview
 *   Map of enumerated attributes in HTML
 * @longdescription
 *   ## Use
 *
 *   ```js
 *   import {enumeratedAttributes} from 'html-enumerated-attributes'
 *
 *   enumeratedAttributes.loading
 *   //=> {selector: 'iframe, img', invalid: 'eager', missing: 'eager', states: ['eager', 'lazy']}
 *   ```
 *
 *   ## API
 *
 *   ### `enumeratedAttributes`
 *
 *   Map of enumerated attributes in HTML (`Record<string, Definition|Array.<Definition>>`).
 */
/**
 * @typedef Definition
 * @property {string} [selector]
 * @property {string|null} [missing]
 * @property {string|null} [invalid]
 * @property {Array.<null|string|string[]>} states
 * @property {true} [allowUnknown]
 * @property {true} [caseSensitive]
 */
/**
 * This map exposes a map of property names to one or more definitions.
 * Each definition defines how that attribute is enumerated.
 *
 * @type {Record<string, Definition|Definition[]>}
 */
export const enumeratedAttributes: Record<string, Definition | Definition[]>
export type Definition = {
  selector?: string | undefined
  missing?: string | null | undefined
  invalid?: string | null | undefined
  states: Array<null | string | string[]>
  allowUnknown?: true | undefined
  caseSensitive?: true | undefined
}
