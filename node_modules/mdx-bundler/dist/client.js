"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMDXComponent = getMDXComponent;
exports.getMDXExport = getMDXExport;

var React = _interopRequireWildcard(require("react"));

var _jsx_runtime = _interopRequireWildcard(require("react/jsx-runtime.js"));

var ReactDOM = _interopRequireWildcard(require("react-dom"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @typedef {import('mdx/types').MDXComponents} ComponentMap
 */

/**
 * @typedef {{[props: string]: unknown, components?: ComponentMap}} MDXContentProps
 */

/**
 *
 * @param {string} code - The string of code you got from bundleMDX
 * @param {Record<string, unknown>} [globals] - Any variables your MDX needs to have accessible when it runs
 * @return {React.FunctionComponent<MDXContentProps>}
 */
function getMDXComponent(code, globals) {
  const mdxExport = getMDXExport(code, globals);
  return mdxExport.default;
}
/**
 * @template ExportedObject
 * @template Frontmatter
 * @type {import('./types').MDXExportFunction<ExportedObject, Frontmatter>}
 * @param {string} code - The string of code you got from bundleMDX
 * @param {Record<string, unknown>} [globals] - Any variables your MDX needs to have accessible when it runs
 *
 */


function getMDXExport(code, globals) {
  const scope = {
    React,
    ReactDOM,
    _jsx_runtime,
    ...globals
  }; // eslint-disable-next-line

  const fn = new Function(...Object.keys(scope), code);
  return fn(...Object.values(scope));
}